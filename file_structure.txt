drm-free-game-comparison-tool/
├── Dockerfile                    # Docker configuration to containerize the app
├── docker-compose.yml            # Docker Compose configuration to set up multi-container environment
├── README.md                     # Project overview and setup instructions
├── requirements.txt              # Python dependencies for the app
├── .gitignore                    # Git ignore configuration for untracked files
├── .env                          # Environment variables for configuration (not committed to source control)
├── airflow/
│   ├── dags/                     # Apache Airflow DAGs for task orchestration
│   │   ├── extract_transform_load.py  # Main ETL DAG file for Airflow
│   │   ├── notify_alerts.py      # DAG for alert notifications
│   └── airflow_config/           # Configuration files for Airflow
│       └── airflow.cfg           # Airflow settings and environment configurations
├── data/
│   ├── raw/                      # Raw data files (optional, if you still store CSVs or logs)
│   ├── processed/                # Processed and cleaned data ready for storage
│   └── logs/                     # Log files generated by Spark, Airflow, or the app
├── data_pipeline/                # Scripts related to the data processing pipeline
│   ├── steam_api.py              # Script to fetch data from the Steam API
│   ├── gog_api.py                # Script to fetch data from the GOG API
│   ├── spark_processing.py       # Data processing code using Apache Spark
│   ├── snowflake_integration.py  # Snowflake integration script (NEW FILE)
│   └── data_validation.py        # Data validation and checks script
├── app/
│   ├── main.py                   # Main FastAPI application code (updated to include new game comparison query)
│   ├── models/                   # Models for request/response (API) and database schema
│   │   ├── game.py               # Game model to interact with the database
│   ├── api/                      # API routes for FastAPI
│   │   ├── game.py               # Endpoints to query game data (Steam, GOG comparison)
│   │   ├── game_comparison.py    # New file for game comparison endpoints (JOIN query for Steam/GOG data)
│   ├── config/                   # Configuration files for FastAPI app
│   │   ├── settings.py           # Configuration settings for FastAPI
│   └── templates/                # HTML templates (if needed)
│       └── index.html            # Front-end template (for web-based interface)
├── tableau_dashboard/            # Tableau dashboard files (could include Tableau .twb or .twbx files)
│   └── dashboard_v1.twb          # Sample Tableau dashboard file
├── snowflake/                    # Configuration for Snowflake data warehouse
│   ├── snowflake_config.py       # Snowflake connection and environment variables
│   ├── sql_queries.py           # SQL queries to interact with Snowflake
│   └── schema.sql               # SQL schema to create necessary tables
├── aws_infrastructure/           # Infrastructure as Code (IaC) for AWS deployment
│   ├── ecs/                      # ECS deployment configurations
│   │   ├── task_definition.json  # ECS task definition for container deployment
│   ├── cloudwatch/               # CloudWatch logs and monitoring configuration
│   │   └── cloudwatch_config.json
│   └── terraform/                # Terraform scripts for infrastructure provisioning
│       ├── main.tf               # Terraform main script for AWS infrastructure
│       └── variables.tf          # Terraform variable definitions
├── ci_cd/                        # Continuous Integration / Continuous Deployment (CI/CD) configurations
│   ├── github_actions/           # GitHub Actions configurations for CI/CD
│   │   └── ci_cd_pipeline.yml    # GitHub Actions workflow file
│   └── Jenkinsfile               # Jenkinsfile for Jenkins CI/CD pipeline (if using Jenkins)
└── tests/                         # Unit and integration tests for the project
    ├── test_api.py               # Tests for FastAPI routes and endpoints
    ├── test_data_pipeline.py     # Tests for data fetching and processing
    ├── test_data_validation.py   # Tests for data validation checks
    ├── test_snowflake.py         # Tests for Snowflake integration
    └── test_infrastructure.py    # Tests for infrastructure (CloudWatch, ECS, etc.)